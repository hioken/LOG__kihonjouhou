〇正規化の目的
・冗長性の排除
・更新時のトラブルを回避する

〇ロック
・共有ロックされている表に対して、共有ロックをかけられる

〇インデックス
- B+木インデックス
・ツリー構造を利用している
・順次検索が範囲検索、不一致検索が高速化する

- ハッシュインデックス
・ハッシュ関数とキーを結び付けている
・一意に特定する検索のみ高速化する


## 応用
〇KVS(Key Value Store)
・RDBとは違う形式のデータベース
・KeyとValueのセットでデータが格納されている
・拡張子絵が高い
・RDBのACIDに対して、KVSはBASEという特性を持っている
- Basecally Available(基本的に利用可能)
常に利用可能
- Soft-state(柔軟な状態)
ノードの状態が一時的に失われても、定期的に状態情報を取得する事により、状態が復元される
- Eventual Consistency(最終的な一貫性)
一時的にデータに不整合な状態が生じるが、最終的には一貫性が保たれる


〇ビックデータ
・大量、多種でリアルタイムに更新されるデータ

〇データウェアハウス
・データを時系列で整理し、蓄積していく情報系データベース
・企業内の様々なデータを保有し、企業戦略の立案や意思決定のサポートをする
- データマート
・特定の利用者が必要とするデータだけを抽出したDB
- データマイニング
・統計学を活用して、データウェアハウスのデータに規則性や法則性を見つける事
- データクレンジング
・データの誤りや表記の揺れを取り除いて、DBの品質を向上させる事

〇分散型データベース
・データをネットワークを介した複数のサーバ上において、それを全て１つのデータベースとして一元管理するシステム
・負荷のかかる結合演算の影響が大きい
- レプリケーション
・同じデータを持つデータベースを複数箇所に配置する形態
・整合性を保つ為に、定期的にデータベースを更新する必要がある
- 分散配置
・全体のデータベースを各所に分散させる形態
・トランザクション処理が発生する事にデータベースを順次更新する

〇結合法
- ネストループ結合法：列を順に呼び出し、他表と付き合わせて結合する。負荷がでかい
- ソートマージ結合法：双方の表を結合する順で並び替えてから、付き合わせて結合する
- ハッシュ結合法：一方の表の結合する列からハッシュ表を作成し、他表の列と結合する。データ量が小さく
