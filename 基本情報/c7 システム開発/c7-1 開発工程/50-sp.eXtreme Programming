-価値
・コミュニケーション
・シンプル
・フィードバック
・勇気
・尊重

-プラクティス
＠共同
・反復
1～2週間の短い期間に区切り、イテレーションごとに部分的な設計・実践・テストを行い、リリースする
これを繰り返す。

・共同の用語
用語集を作成し、チームの使用する用語と概念を一致させる

・開けた作業空間
会話しやすく、作業に打ち込める雰囲気を作る
顧客も含めて一か所に集まる

・回顧
現状を明確に把握しつつ、過去のフィードバックを迅速に反映させる
またそうしやすい環境を作る

＠開発
・テスト駆動開発
実装より先にテストを作成する
テストはモジュール単位でのホワイトボックステストと、顧客の要求を満たしているか確認するブラックボックステストの観点で作成する
また、テストは自動である事が推奨されている
-実装の目標は、このテストをパスする事になる-

・ペアプログラミング
プログラミングは二人一組で行う
このペアは、コーダーとナビゲーター(仕様書の確認と全体構造の設計等)に分かれる
この役割を定期的に交代しながら仕事を勧める

・リファクタリング
完成済みのコードでも、随時、回前処置を行う
外部から見た動作が変更されない事が前提で行われる

・ソースコードの共同所有
断りなく他人のソースコードを変更しても良い
ソースコードの責任は全員が持つ

・継続的インテグレーション
単体テストをパスするコードが完成し次第、すぐに結合テストを行い、問題点や改善点を探す
少なくとも一日に一回は結合テストを行う
全体のコンパイルと自動テストを行うたびに、専用のコンピュータを用意する事が推奨されている

・YAGNI(You Aren'nt Going to Need It.)
必要な機能だけシンプルに実装する
なるべく複雑化しない

@管理者
・責任の受け入れ
責任を受け入れ、チームがストーリーを実現できる事を約束する

・援護
チーム活動が円滑に進むように支援し、妨害となるもの(外圧)を取り除く

・四半期毎の見直し
四半期毎に、顧客とともに現状をレビューし、必要なら今後の計画を見直す

・ミラー
現状をチームと共有し、定期的に伝える

・適切なペースの仕事
集中力を保つため、適切な労働時間でチームを働かせる
そのために計画的に開発スピードの調整を行う

＠顧客
・ストーリーの作成
求める機能のコンセプトを短く纏めたストーリーカードを作成する
そのカードを元に、開発者・管理者を含めたチームとのミーティングを行い、詳細を決定する

・リリース計画
どのストーリーをどのイテレーションの対象とするか、チームミーティングで主体となって提案し、最終的な承認を行う

・受け入れテスト
ブラックボックステストを行う(ストーリーが実現出来てるか、望むシステムになっているか確認、指摘する)

・短期リリース
動くソフトウェアを、2週間 ~ 3ヵ月のでリリースする
