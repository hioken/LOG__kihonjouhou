## プログラムの構造化
・再利用性を高める, エラーの原因を特定しやすくする, 分担作業をするなどの目的で、プログラムをモジュール単位に分割する
・以上をプログラムの構造化という
・色々な分割技法がある

## プログラムの構造化の技法
〇STS分割法
・Source(源泉 = 入力処理), Transform(変換 = 変換処理), Sink(吸収 = 出力処理)
・つまり、1.入力処理、2.変換処理、3.出力処理の３つに分ける
・例：1.バーコード読み取り、2.テーブル参照、3.バーコード対応のデータ表示

〇トランザクション分割法
・トランザクション単位で分割する

〇共通機能分割法
・プログラムの中の共通機能をモジュールとして分割する

## モジュールの独立性, 強度, 結合度
〇独立性
・モジュール強度が強いほど高い
・モジュール結合度が強いほど低い
・高いほど好ましい

〇強度
・機能の特化度
・モジュール内の機能の結びつき

-7段階に分かれる(名称/レベル, 強い順)
・機能的/7
単一機能を実行するモジュール
・情報的/6
同一データ構造を扱う機能をまとめたモジュール
・連絡的/5
共通の情報を扱う複数機能が、順番に実行されるモジュール
Railsでなんかの投稿の流れをMVCの流れをモジュールにまとめるとこれっぽい
・手順的/4
異なる情報を扱う複数機能が、順番に実行されるモジュール
「退会した後、ログイン画面に戻る」、とかが多分これじゃね
・時間的/3
特定の時間で必要とされる複数作業を一つにまとめたモジュール
ゲームでいうと、イベントデータ全部盛りみたいな感じかな
・論理的/2
論理的に関連のあるモジュールをまとめたモジュール
「データの保存」だけで、ひとまとめにして、ユーザの保存ならusers, 投稿の保存ならlistsのコントローラーだけど、それを一つのモジュールにしちゃう的な？分らん
・暗合的/1
たまたま一緒になっただけで、なんの関連性もない


〇結合度
・どんなデータをやり取りするときに、他のモジュールと結合するか
・他のモジュールとの結合の仕方

-6段階に分かれる(名称/レベル, 弱い順)
・データ/1
単一データを引数として渡すモジュール
・スタンプ/2
同一データ構造を引数として引き渡すモジュール
・制御/3
他のモジュールの動作の基準となる目的で、引数として制御パラメータを受け渡しするモジュール
・外部/4
単一データを大域的データとして受け渡すモジュール
・共通/5
同一データ構造を大域的データとして受け渡すモジュール
・内部/6
他のモジュール内のデータを直接参照する

※大域的 = グローバル変数など、関数の外に出れるやつって印象だけど、分からん
