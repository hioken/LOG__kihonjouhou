## 高速化

〇パイプライン処理
・命令処理の４過程(フィッチ、解読、オペランド部読み出し、実行)の１工程を終えたら、すぐ次のクロックで次の命令の処理を始める方法
 1ステージ1クロックだった場合、3命令の処理にかかる時間を4 * 3 = 12クロックから、4 + 2 = 6クロックに短縮できる
・分岐ハザード
 命令1が完了する前に、先読みして命令2を実行しているため、命令1の結果によって命令2以降が行われない場合、先読み分が無駄になってしまう。
 先読みが無駄になる事を「分岐ハザード」と呼ぶ

〇分岐予測と投機実行
・分岐予測
 分岐が実行されるのか、次の命令がどれか予測する事
・投機実行
 分岐予測の元、分岐先と予測される命令を実行開始する手法

〇パイプラインの高速化
・スーパーパイプライン
 １ステージをさらに細かく区切って、パイプライン処理を効率化する

・スーパースカラ
 パイプライン処理を行う回路をそもそも複数積んでしまう事で、同時に複数の命令を実行できるようにする


## CPUのアーキテクチャ
〇CISC -Complex Instruction Set Computer
・CPUに高機能な命令を持たせる事で、ひとつの命令で複雑な処理を可能にする
・マイクロプログラムを内部に記憶させ、高機能な命令を実現させている
・命令の種類が多く、長さがバラバラなため、命令の数は少なく、パイプラインは詰まりやすい
・命令の追加や変更、機械語のプログラム作成が用意

〇RISC -Reduced Instruction Set Computer
・単純な命令しか持たせない事で、1つの命令を高速でこなす
・ワイヤードロジックによって、全ての命令をハードウェア的に実装
・命令の種類が少なく、長さが均等なため、命令の数は多く、パイプラインは効率的に使われる
・単純な命令しかないため、命令の追加や変更、機械語のプログラム作成が困難
