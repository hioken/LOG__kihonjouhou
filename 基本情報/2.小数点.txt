〇固定小数点数
・bitの列のどの位置に小数点があるかあらかじめ固定する
・最下位bitの右側に小数点を固定すれば整数だけになる

〇浮動小数点数
・指数表記を使って数値を扱う

〇指数表記
・符号、仮数、基数、指数を用いて数を表す
符号：+-を表す
仮数：方式に基づいて小数点以下の0を省いた数
基数：基数
指数：省いた0の数を表現
例：
0.0025
= 0(符号).25(仮数) * 10(基数)"-2"(指数)

〇前提
・正規化
指数表記を使って、最小のbit数で数を表現すること、正規化するのが大前提
・略称
S : 仮数の符号部
E : 指数部
M : 仮数

〇シンプル形式(32bit)
・配分
S : 1bit
E : 7bit
M : 24bit

・変換方法
1:
0.Mで正規化する

2:
S E Mをそれぞれ決める

3:
Eを2進数に変換する

4:
それぞれの位置にはめ込む

〇IEEE754形式
・配分
S : 1bit
E : 8bit
M : 23bit

・変換方法
1:
1.Mで正規化する

2:
S E Mをそれぞれ決める
Eは実際の指数に、指数の最低値(32bitなら-127)を+に変えた数を足した数にする

3:
Eを2進数に変換する

4:
それぞれの位置にはめ込む




〇誤差
・決められたbit数を超えてしまった数、大きすぎる数や無限小数など

〇溢れた場合
・最大値を超えることをオーバーフロー
・最小値を超えることをアンダーフロー

〇情報落ち
絶対値の大きな数と小さな数を加減算したときに、小さな数が指定の桁数から溢れてアンダーフローを起こして、結果反映されない、なかったことにされること

〇打ち切り誤差
名前の通り、計算を途中で打ち切った場合に生じる誤差

〇桁落ち
絶対値が近い値の差を求めた時等
・差分を「有効桁数の範囲で」出す
・差分を正規化する
・正規化した後に、有効桁数の余りを0で埋める
・↑この埋めた時の0が本当に0であった保証がない
このようなパターンで、信用できない桁の数が増える

〇丸め誤差
四捨五入等をして切り捨てた数分の誤差


